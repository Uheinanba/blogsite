(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{72:function(e,n,t){"use strict";t.r(n);var a=t(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"react-in-patterns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-in-patterns","aria-hidden":"true"}},[e._v("#")]),e._v(" react-in-patterns")]),t("h2",{attrs:{id:"composition-组合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#composition-组合","aria-hidden":"true"}},[e._v("#")]),e._v(" Composition 组合")]),t("blockquote",[t("p",[e._v("React最大的一个优势在于组合性,下面探讨下react组合的一些技巧")])]),t("p",[e._v("演示例子")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Navgation  = () => <nav>home Nav</nav>\nconst Header  = () => <Navgation/>\nconst App = ()  = () => <Header />\n")])]),t("p",[e._v("APP -> Header-> Navgation\n问题:")]),t("ul",[t("li",[e._v("假设我们需要Header,只是Navgation换成别组件。")]),t("li",[e._v("强依赖,Header依赖于Navgation,对于测试不友好。")])]),t("h3",{attrs:{id:"chilren"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chilren","aria-hidden":"true"}},[e._v("#")]),e._v(" chilren")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Navgation  = () => <nav>home Nav</nav>\nconst Header  = ({children}) => <div>{children}</div>\nconst App = () => <Header><Navgation/></Header>\n")])]),t("p",[e._v("这里Header不在强依赖Navgation组件,而是依赖于props.children。")]),t("h3",{attrs:{id:"chilren-component-as-props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chilren-component-as-props","aria-hidden":"true"}},[e._v("#")]),e._v(" chilren component as props")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Navgation  = () => <nav>home Nav</nav>\nconst Header  = ({nav}) => <div>{nav}</div>\nconst App = () => <Header nav={<Navgation/>} />\n")])]),t("p",[e._v("将子组件作为props传递")]),t("h3",{attrs:{id:"hoc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hoc","aria-hidden":"true"}},[e._v("#")]),e._v(" HOC")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Navgation  = () => <nav>home Nav</nav>\n\nconst enhanceComponent = (WarpedComponent) => {\n  return class newComponent extends React.Component {\n    render() {\n      return <WarpedComponent {...this.props}/>\n    }\n  }\n}\nconst Header  = ({nav}) => <div>{nav}</div>\nconst EnhanceHeader = enhanceComponent(Header);\n\nconst App = () <EnhanceHeader nav={<Navgation/>} />\n")])]),t("p",[e._v("当然HOC模式还有另外一个特点我们可以在HOC中附加业务逻辑,这样我们可以把一些公用的业务逻辑封装起来。")]),t("h3",{attrs:{id:"function-as-c-children-render-prop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-as-c-children-render-prop","aria-hidden":"true"}},[e._v("#")]),e._v(" Function as c children, render prop")]),t("p",[e._v("思考下面两段代码:")]),t("ul",[t("li",[e._v("封装数据获取逻辑:")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class DataProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { data: null };\n    setTimeout(() => this.setState({ data: 'Hey there!' }), 5000);\n  }\n  render() {\n    if (this.state.data === null) return null;\n    return (\n      <section>{ this.props.render(this.state.data) }</section>\n    );\n  }\n}\n\n<DataProvider render={data=> <TableList dataList=data/>}>\n")])]),t("ul",[t("li",[e._v("封装权限处理:")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<Authorize\n    permissionsInclude={[ 'read:products' ]}\n    render={ () => <ProductsList /> } />\n")])]),t("h3",{attrs:{id:"依赖注入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入","aria-hidden":"true"}},[e._v("#")]),e._v(" 依赖注入")]),t("p",[e._v("// TODO https://krasimir.gitbooks.io/react-in-patterns/content/chapter-10/")]),t("ol",[t("li",[e._v("使用HOC")])]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const inject = (Component) => {\n  return class Injector extends React.Component {\n    render() {\n      return (\n        <Component {...this.props} context={context}/>\n      )\n    }    \n  }\n}\n")])]),t("p",[e._v("redux 的connect其实也是这种思路\n2. react context v16.3之前\n3. react context v16.3之后版本\n4. 使用模块系统(pub/sub)\n// di.jsx")]),t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var dependencies = {};\n\nexport function register(key, dependency) {\n  dependencies[key] = dependency;\n}\n\nexport function fetch(key) {\n  if (dependencies[key]) return dependencies[key];\n  throw new Error(`\"${ key } is not registered as dependency.`);\n}\n\nexport function wire(Component, deps, mapper) {\n  return class Injector extends React.Component {\n    constructor(props) {\n      super(props);\n      this._resolvedDependencies = mapper(...deps.map(fetch));\n    }\n    render() {\n      return (\n        <Component\n          {...this.state}\n          {...this.props}\n          {...this._resolvedDependencies}\n        />\n      );\n    }\n  };\n}\n\nimport { wire } from './di.jsx';\nvar Title = function(props) {\n  return <h1>{ props.title }</h1>;\n};\n\nexport default wire(\n  Title,\n  ['my-awesome-title'],\n  title => ({ title })\n);\n")])])])}],!1,null,null,null);n.default=r.exports}}]);